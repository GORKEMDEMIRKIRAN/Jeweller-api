// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int           @id @default(autoincrement())
  username              String?
  phone                 String?
  email                 String        @unique
  isEmailVerified       Boolean?      @default(false)
  isPhoneVerified       Boolean?      @default(false)
  phoneVerificationCode Int?          @default(0)
  phoneCodeExpiresAt    DateTime?     @default(now())
  password              String        @db.VarChar(255)
  accessToken           String?       @db.VarChar(255)
  refreshToken          String?       @db.VarChar(255)
  createdAt             DateTime      @default(now())
  userTypeId            Int
  userType              UserType      @relation(fields: [userTypeId], references: [id])
  transactions          Transaction[]
  customers             Customer[]
}

model UserType {
  id    Int    @id @default(autoincrement())
  name  String // admin,manager,user  
  users User[]
}

model Customer {
  id             Int           @id @default(autoincrement())
  nameSurname    String
  email          String        @unique
  phone          String?
  createdAt      DateTime      @default(now())
  address        String?
  customerTypeId Int
  customerType   CustomerType  @relation(fields: [customerTypeId], references: [id])
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  transactions   Transaction[]
}

model CustomerType {
  id        Int        @id @default(autoincrement())
  name      String // vip/ no vip
  customers Customer[]
}

model Product {
  id                 Int                  @id @default(autoincrement())
  unitPrice          Float?
  totalPrice         Float?
  quantity           Int
  grossWeight        Float?
  netWeight          Float?
  images             String[]
  productTypeId      Int
  productType        ProductType          @relation(fields: [productTypeId], references: [id])
  createdAt          DateTime             @default(now())
  TransactionProduct TransactionProduct[]
}

model ProductType {
  id       Int       @id @default(autoincrement())
  name     String // yüzük,kolye,küpe
  products Product[]
}

model Transaction {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  customerId         Int
  customer           Customer             @relation(fields: [customerId], references: [id])
  transactionTypeId  Int
  transactionType    TransactionType      @relation(fields: [transactionTypeId], references: [id])
  createdAt          DateTime             @default(now())
  TransactionProduct TransactionProduct[]
}

model TransactionType {
  id          Int           @id @default(autoincrement())
  name        String // sale,purchase,deposit,limit
  transaction Transaction[]
}

model TransactionProduct {
  id            Int         @id @default(autoincrement())
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])
  quantity      Int
}
